from typing import Any, Dict, List, Optional, Set, Union

class Redis:
    def __init__(self, host: str = "localhost", port: int = 6379, db: int = 0): ...
    def zrangebyscore(
        self, name: Union[bytes, str], min: float, max: float
    ) -> List[Union[bytes, str]]: ...
    def blpop(
        self, keys: List[str], timeout: int = 0
    ) -> Optional[List[Union[bytes, str]]]: ...
    def zrem(self, name: Union[bytes, str], *values: Union[bytes, str]) -> int: ...
    def rpush(self, name: Union[bytes, str], *values: Union[bytes, str]) -> int: ...
    def zadd(self, name: Union[bytes, str], mapping: Dict[str, float]) -> int: ...
    def set(self, name: Union[bytes, str], value: Any) -> bool: ...

    # Common convenience methods used across the project
    def get(self, name: Union[bytes, str]) -> Optional[Union[bytes, str]]: ...
    def exists(self, name: Union[bytes, str]) -> int: ...
    def delete(self, *names: Union[bytes, str]) -> int: ...
    def expire(self, name: Union[bytes, str], seconds: int) -> bool: ...
    def expireat(self, name: Union[bytes, str], when: int) -> bool: ...
    def hget(
        self, name: Union[bytes, str], key: Union[bytes, str]
    ) -> Optional[Union[bytes, str]]: ...
    def hset(
        self, name: Union[bytes, str], key: Union[bytes, str], value: Any
    ) -> int: ...
    def hgetall(
        self, name: Union[bytes, str]
    ) -> Dict[Union[bytes, str], Union[bytes, str]]: ...
    def hdel(self, name: Union[bytes, str], *keys: Union[bytes, str]) -> int: ...
    def incr(self, name: Union[bytes, str]) -> int: ...
    def decr(self, name: Union[bytes, str]) -> int: ...
    def lpop(self, name: Union[bytes, str]) -> Optional[Union[bytes, str]]: ...
    def lrange(
        self, name: Union[bytes, str], start: int, end: int
    ) -> List[Union[bytes, str]]: ...
    def llen(self, name: Union[bytes, str]) -> int: ...
    def sadd(self, name: Union[bytes, str], *values: Union[bytes, str]) -> int: ...
    def srem(self, name: Union[bytes, str], *values: Union[bytes, str]) -> int: ...
    def smembers(self, name: Union[bytes, str]) -> Set[Union[bytes, str]]: ...
    def ping(self) -> bool: ...
    def flushdb(self) -> None: ...
    def flushall(self) -> None: ...
